#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Receiver:
    '''
    This class is responsible for receiving data.
    '''
    def __init__(self):
        '''
        This is the constructor for the Receiver class.
        '''
        # Create a UDP socket
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)
        # Initialize the remote host and port
        self.remote_host = None
        self.remote_port = None
        # save acknowledged packets so we know what has finished being handled
        self.sequences_acknowledged = []
        # store all ack messages in case packets are out of order, and need to print at the very end
        self.acknowledgement_cache = {}
        # This is the parameter that will be used to keep track of the sequence number, help with keeping things in order
        self.sequential_sequence_parameter = '0000000' # Base sequence number
        
    def send(self, message):
        '''
        This function sends a message.
        Params:
            @message: The message to send
        '''
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        '''
        This function logs a message using stderr.
        Params:
            @message: The message to log
        '''
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def check_for_corruption(self, msg):
        '''
        This function checks for corruption in the message.
        Utilizing the checksum to check for corruption.
        Params:
            @msg: The message to check for corruption
        Returns:
            True if the message is not corrupted, False otherwise
        '''
        checksum = str(sum(ord(char) for char in msg["data"]))
        if msg["checksum"] == checksum:
            return False
        else:
            return True
    
    def deliver_in_order(self):
        '''
        -- In-Order Delivery --
        This function prints the packets in the correct order.
        We have two ways on making sure the packets are in order:
        1. We can sort the packets by their sequence number
        2. Only print the packets that have been acknowledged and match the next sequential sequence number
        '''
        # We want to ensure that the packets are in order
        in_order = sorted(self.acknowledgement_cache.items(), key=lambda x: int(x[0]))
        self.acknowledgement_cache = {key: value for key, value in in_order}
        # Delivering packets in order
        for key, value in self.acknowledgement_cache.items():
            if key == self.sequential_sequence_parameter:
                print(value["data"], end='', flush=True)
                self.sequential_sequence_parameter = str(int(self.sequential_sequence_parameter) + 1).zfill(len(self.sequential_sequence_parameter))
                # Add the sequence number to the list of acknowledged packets
                self.sequences_acknowledged.append(key)
        self.acknowledgement_cache = {seq: ack for seq, ack in self.acknowledgement_cache.items() if seq not in self.sequences_acknowledged}
        # Clear acknowledged sequences list
        self.sequences_acknowledged.clear()

    def run(self):
        '''
        This function runs the receiver.
        '''
        # Loop forever
        while True:
            # Use select to wait for data to be available for reading from the socket
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                # Receive data from the socket
                data, addr = conn.recvfrom(65535)
                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]
                # Check if can decode the data
                try:
                    # Decode the received data as JSON
                    msg = json.loads(data.decode('utf-8'))
                except json.JSONDecodeError:
                    # If the data is not JSON, ignore it
                    self.log("Can't decode the given data")
                    continue
                # Check if the data is corrupted
                if self.check_for_corruption(msg) == False:
                    # Extract the sequence number from the data
                    sequence = msg["sequence"]
                    # Log the received data message
                    self.log(f"Received acknowledgement for sequence: {sequence}")
                    # Add the sequence number to the list of acknowledged packets
                    if sequence not in self.acknowledgement_cache.keys():
                        # Store the acknowledgment message in acknowledgement cache dictionary
                        self.acknowledgement_cache[sequence] = msg
                    # Send Acknowledgment
                    self.send({ 
                        "type": "ack", 
                        "sequence": sequence 
                        })
                    # Log the acknowledgment message
                    self.log(f"Sending acknowledgment with sequence: {msg['sequence']}")
                    # -- In-Order Delivery --
                    self.deliver_in_order()

if __name__ == "__main__":
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    # Create an instance of the Receiver class
    receiver = Receiver()
    # Run the receiver
    receiver.run()