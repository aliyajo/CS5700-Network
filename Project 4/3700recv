#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Receiver:
    def __init__(self):
        # Create a UDP socket
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        # Bind the socket to any available IP address and port
        self.socket.bind(('0.0.0.0', 0))
        # Get the port number that the socket is bound to
        self.port = self.socket.getsockname()[1]
        # Log the bound port number
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

    def send(self, message):
        # Send a message to the remote host and port
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        # Log a message to stderr
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        msges = []
        while True:
            # Use select to wait for data to be available for reading from the socket
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                # Receive data from the socket
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                # Decode the received data as JSON
                msg = json.loads(data.decode('utf-8'))
                # Log the received data message
                self.log("Received data message %s" % msg)

                # Print out the data to stdout
                print(msg["data"], end='', flush=True)

                # TODO: This might be where we establish that cumulative ACK
                # Always send back an ack
                msges.append(msg["sequence"])
                self.send({ "type": "ack", "sequence": msg["sequence"] })

        return
    

    def cumulative_ack(self, ack):
        '''
        Send a cumulative ack to the sender.
        This is only implemented if multiple packets are recieved
        '''
        # Send a cumulative ack to the remote host
        self.send({ "type": "ack", "ack": ack })

if __name__ == "__main__":
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    # Create an instance of the Receiver class
    receiver = Receiver()
    # Run the receiver
    receiver.run()
