#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375

class Sender:
    '''
    This class is responsible for sending data.
    '''
    def __init__(self, host, port):
        ''''
        Constructor for the Sender class.
        Params:
            @host: string of the remote host to connect to
            @port: integer of the UDP port number to connect to
        '''
        # Initialize the remote host and port
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        # Create a UDP socket
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        # Keep track of the outstanding packets
        self.outstanding_packets = {}
        self.sequence_number = 0
        # -- Congestion control variables --
        # Intialize the congestion window
        self.cong_window = 1
        # Initialize the slow start threshold
        self.slow_start_thresh = 4
        # -- Timeout variables --
        # Initialize the round trip time
        self.round_trip_time = 1
        # Initialize the timeout time
        self.timeout = self.round_trip_time * 2

    def log(self, message):
        '''
        This function logs a message using stderr.
        Params:
            @message: The message to log
        '''
        # Write the message to stderr
        sys.stderr.write(message + "\n")
        # Flush the buffer
        sys.stderr.flush()

    def send(self, message):
        '''
        This function sends a message to the remote host.
        Params:
            @message: The message to send
        '''
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))
    
    def extract_sequence_number(self, data):
        '''
        This function is used to extract the sequence number from the data.
        Params:
            @data: string of the data
        Returns:
            @sequence_number: integer of the sequence number
        '''
        # Split the data by the first space
        start_index = data.find('Block ') + len('Block ')
        end_index = data.find(' ', start_index)
        # Extract the sequence number from the data
        sequence_number = data[start_index:end_index]
        # Return the sequence number
        return sequence_number

    def retransmission_control(self, sequence):
        '''
        This function deals with the retransmission timeout control aspect of the sender.
        All of the calculations was taken from lecture slides.
        Params:
            @sequence: integer of the sequence number of the ack
        '''
        # Exract the time the packet was sent out
        sent_out_time = self.outstanding_packets[sequence]["time"]
        # -- Calculation for this Round Trip Time (RTT) --
        # New RTT = (0.875)(Old RTT) + (1 - 0.875)(Sample RTT)
        # Sample RTT = time the ack was received - time the packet was sent out >> This is the time it took for the packet to be acknowledged
        self.round_trip_time = (0.875) * self.round_trip_time + (1 - 0.875) * (time.process_time() - sent_out_time)
        # -- Calculation for the Timeout Time (RTO) --
        # RTO = 2 * New RTT
        self.timeout_time = self.round_trip_time * 2
    
    def congestion_control(self, timeout=False):
        '''
        This function is used to implement the congestion control algorithm.
        Deals with multiple aspects of congestion control
         * Timeout 
         * Slow Start
         * Congestion Avoidance
        Params:
            @Timeout: boolean of whether the packet has timed out
        '''
        # If the packet has timed out
        if timeout:
            # If the packet has timed out, set the slow start threshold to half the congestion window
            self.slow_start_thresh = self.cong_window / 2
            # Set the congestion window to 1
            self.cong_window = 1
        # If the packet has not timed out
        else:
            # -- Slow Start --
            # If the cong window is less than the ssthresh
            if self.cong_window < self.slow_start_thresh:
                # Implement the slow start phase, exponential growth
                self.cong_window *= 2
            # -- Congestion Avoidance --
            # If the cong window is greater than or equal to the slow start threshold
            elif self.cong_window >= self.slow_start_thresh: 
                self.cong_window = self.cong_window + (1 / self.cong_window)

    def run(self):
        '''
        This function runs the sender.
        '''
        # While loop
        while True:
            # Select the socket
            sockets = [self.socket, sys.stdin]
            socks = select.select(sockets, [], [], 0.1)[0]
            # -- Timeout Control --
            # For each outstanding packet
            for sequence, data in self.outstanding_packets.items():
                # Calculate the expected time
                expected_time = data["time"] + self.timeout
                # Get the current time
                current_time = time.process_time()
                # If the data has timed out
                if current_time > expected_time:
                    sequence = self.extract_sequence_number(data["data"])
                    # Retransmit the packet due to it timing out
                    msg = {"type": "msg", 
                           "sequence": sequence, 
                           "time": time.process_time(), 
                           "data": data["data"]}
                    self.outstanding_packets[sequence] = msg
                    self.log(f"Retransmitting Packet With Sequence #: {sequence}")
                    self.send(msg)
                    # Timeout Control, timeout is True
                    self.congestion_control(timeout=True)
            # For each socket
            for conn in socks:
                # If the socket is the UDP socket, recieved message from the receiver
                if conn == self.socket:
                    k, addr = conn.recvfrom(65535)
                    msg = json.loads(k.decode('utf-8'))
                    # Extract sequence number
                    sequence = msg["sequence"]
                    # Received message from the receiver
                    self.log(f"Received Acknowledgement with Sequence #: {sequence}")
                    # If the sequence number is in the outstanding packets list, deal with it
                    if sequence in self.outstanding_packets:
                        # Congestion Control
                        self.congestion_control(timeout=False)
                        # Timeout Control
                        self.retransmission_control(sequence)
                        # Dealt with the ack, so remove it from the outstanding packets list
                        del self.outstanding_packets[sequence]
                # If the socket is stdin
                # Used in cases of sending data to the reciever, or when the transmission is done
                elif conn == sys.stdin:
                    # If the outstanding packets is less than the congestion window
                    if len(self.outstanding_packets) < self.cong_window:
                        # Read data from stdin, this is data trying to send
                        data = sys.stdin.read(DATA_SIZE)
                        # -- If there is data to send --
                        # Configuring message to send to the receiver
                        if data:
                            # Extract the sequence number from the data
                            sequence = self.extract_sequence_number(data)
                            # Create the message
                            msg = {
                            "type": "msg", 
                            "sequence": sequence, 
                            "time": time.process_time(),
                            "data": data, 
                            }
                            # Add the message to the outstanding packets
                            self.outstanding_packets[sequence] = msg
                            # Send the message to the receiver
                            self.send(msg)
                            # Log the message
                            self.log(f"Sending Packet With Sequence #: {sequence}")

                        # There is no more data, exit 
                        if len(data) == 0:
                            # all data has been sent and all ACKs received
                            if not self.outstanding_packets:
                                self.log("All done!")
                                return


if __name__ == "__main__":
    # Parse the arguments
    parser = argparse.ArgumentParser(description='send data')
    # Add the host argument
    parser.add_argument('host', type=str, help="Remote host to connect to")
    # Add the port argument
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    # Parse the arguments
    args = parser.parse_args()
    # Create a sender object
    sender = Sender(args.host, args.port)
    # Run the sender
    sender.run()