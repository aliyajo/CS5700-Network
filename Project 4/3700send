#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375

# Define the Sender class
class Sender:
    def __init__(self, host, port):
        ''''
        Constructor for the Sender class.
        Params:
            @host: string of the remote host to connect to
            @port: integer of the UDP port number to connect to
        '''
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # Create a UDP socket
        self.socket.bind(('0.0.0.0', 0))  # Bind the socket to a random local port
        self.waiting = False
        self.outstanding_packets = {}
        self.window_size = 2
        self.sequence_number = 0

    def log(self, message):
        '''
        This function is used to log a message to stderr.
        Params:
            @message: string of the message to log
        '''
        # Using stderr to log the message
        sys.stderr.write(message + "\n") 
        sys.stderr.flush()

    def send(self, message):
        '''
        This function is used to send a message to the remote host and port.
        Params:
            @message: dictionary of the message to send
        '''
        # Send the message to the remote host and port
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def checking_acknowledgement(self, acknowledge_sequence):
        '''
        This function is used to check if the sequence number is in the outstanding packets.
        If it is, remove from the outstanding packets list.
        Params:
            @acknowledge_sequence: integer of the sequence number
        '''
        # Iterate through the outstanding packets
        for sequence in self.outstanding_packets:
            # If the sequence number is in the outstanding packets, remove it
            if acknowledge_sequence == sequence:
                self.outstanding_packets.pop(sequence)
                break
        return
    
    def tracking_outstanding_packets(self, sequence_number, data, start):
        '''
        This function is used to track the outstanding packets, establishes a dictionary.
        Params:
            @sequence_number: integer of the sequence number
            @data: string of the data
        '''
        # Setting sequence number as the first layer key
        if sequence_number not in self.outstanding_packets:
            self.outstanding_packets[sequence_number] = {
                # Adding the time sent in the second layer
                "time": start,
                # Adding the data in the second layer
                "data": data
            }
        #TODO: maybe where implement duplicate logic?
    
    def extract_sequence_number(self, data):
        '''
        This function is used to extract the sequence number from the data.
        Params:
            @data: string of the data
        Returns:
            @sequence_number: integer of the sequence number
        '''
        # Split the data by the first space
        start_index = data.find('Block ') + len('Block ')
        end_index = data.find(' ', start_index)
        # Extract the sequence number from the data
        self.sequence_number = data[start_index:end_index]
        return self.sequence_number

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]  # Select the sockets to monitor for input
            
            socks = select.select(sockets, [], [], 0.1)[0]  # Wait for input on the sockets with a timeout of 0.1 seconds
            for conn in socks:
                # If the connection is from the socket
                if conn == self.socket:
                    # Receive data from the socket
                    k, addr = conn.recvfrom(65535)
                    # Decode the received data
                    msg = k.decode('utf-8')
                    # Json load the message
                    ack = json.loads(msg)
                    # Check if the sequence number from ack is in the outstanding packets
                    self.checking_acknowledgement(ack['sequence'])
                    # If the outstanding packets is empty, set waiting to false
                    if len(self.outstanding_packets) == 0:
                        self.waiting = False
                    # Else, set waiting to true
                    else :
                        # TODO: This is probably where will implement RTO
                        # Could use this class variable of waiting to determine RTO
                        self.waiting = True
                    # Log the received message
                    self.log("Received message '%s'" % msg)

                # If the connection is from the standard input
                elif conn == sys.stdin:
                    if len(self.outstanding_packets) < self.window_size:
                        # Read data from the standard input
                        data = sys.stdin.read(DATA_SIZE)
                        if len(data) == 0:
                            self.log("All done!")
                            sys.exit(0)
                        self.sequence_number = self.extract_sequence_number(data)
                        # Create our own timer -- used for retransmission aspect -- 
                        start = time.process_time()
                        # Create a message object
                        msg = { 
                            "type": "msg", 
                            "sequence": self.sequence_number, 
                            "time": start, 
                            "data": data 
                            }
                        # Tracking the outstanding packets
                        self.tracking_outstanding_packets(self.sequence_number, data, start)
                        # Log the message being sent
                        self.log("Sending message '%s'" % msg)
                        # Send the message to the remote host and port
                        self.send(msg)
                    
        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)  # Create a Sender object with the provided host and port
    sender.run()  # Run the sender
