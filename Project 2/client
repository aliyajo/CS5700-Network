#!/usr/bin/env python3
'''
By: Aliya Jordan
Date Started: 1/25/24

This file is for the client side of connected to a FTP server.
Has the features of a FTP application.
'''
import argparse
import socket
from urllib.parse import urlparse

def parse_arguments():
    '''
    This function parses the arguments from the command line 
    given by the user.
    @return: the arguments from the command line. 
    '''
    parser = argparse.ArgumentParser(description='FTP client for listing, copying, moving, and deleting files and directories on remote FTP servers.')
    # Parsing for the ls command
    parser.add_argument('positional_arguments', choices=['ls', 'mkdir', 'rm', 'rmdir', 'cp', 'mv'], metavar='operation', help="This operation to execute. Valid operations are 'ls', 'rm', 'rmdir','mkdir', 'cp', and 'mv'.")
    parser.add_argument('params', action='store', nargs='*', help="Parameters for the given operation. Will be one or two paths and/or URLs.")
    args = parser.parse_args()
    return args
    
def parse_URL(url):
    '''
    This function parses the URL given by the user
    @param url: the URL given by the user
    @return: the username, password, host, port number, and path of the URL.
    '''
    parsed_url = urlparse(url)
    username = parsed_url.username
    if not username:
        username = "anonymous"
    password = parsed_url.password
    host = parsed_url.hostname
    port = parsed_url.port
    # If no port given, then revert to default of 21.
    if port == None:
        port = 21
    path = parsed_url.path
    return username, password, host, port, path
    
def connect_to_server():
    control_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
def message_to_server(message):
    '''
    This function sends the message to the server.
    @param message: the message to send to the server.
    '''
    # Create a socket
    control_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    
def ls_command(path):
    '''
    This function is for the ls command.
    @param path where want to list the directory.
    '''
    ls_message = "LIST" + " " + path + "\r" + "\n"
    message_to_server(ls_message)
    quit_command()

def quit_command():
    '''
    This function is for the quit command.
    '''
    quit_message = "QUIT" + "\r" + "\n"
    return quit_message

def main():
    '''
    This is the main function to run the client program. 
    '''
    # Parse the arguments given in the command line.
    args = parse_arguments()
    # Send the parameter (URL) to the parse_URL function.
    username, password, host, port, path = parse_URL(args.params[0])

    # Perform given command
    if args.positional_arguments == "ls":
        ls_command(path)
        read_response(c_socket)
if __name__ == "__main__":
    main()