#! /usr/bin/env python

import argparse
import subprocess

# domain name & IP address of HTTP cache servers
REPLICA_SERVERS = {
    'cdn-http3.khoury.northeastern.edu': '45.33.55.171',
    'cdn-http4.khoury.northeastern.edu': '170.187.142.220', 
    'cdn-http7.khoury.northeastern.edu': '213.168.249.157', 
    'cdn-http11.khoury.northeastern.edu': '139.162.82.207', 
    'cdn-http14.khoury.northeastern.edu': '45.79.124.209', 
    'cdn-http15.khoury.northeastern.edu': '192.53.123.145', 
    'cdn-http16.khoury.northeastern.edu': '192.46.221.203',
}

DNS_SERVER = 'cdn-dns.khoury.northeastern.edu'

def stop_http_servers(args, REPLICA_SERVERS):
    '''
    Stops all HTTP cache servers.
    '''
    for server in REPLICA_SERVERS:
        # Draft ssh command to find and kill process
        ssh_command =  [
            'ssh',
            '-i', args.keyfile,
            f'{args.username}@{server}',
            # find specific process and kill it
            f'lsof -ti:{args.port}' 
        ]
        try:
            # get process id
            process = subprocess.run(ssh_command, check=True, capture_output=True, text=True)
            pid = process.stdout.strip()
            
            # if pid found, kill it
            if pid:
                kill_command =  [
                    'ssh',
                    '-i', args.keyfile,
                    f'{args.username}@{server}',
                    f'kill {pid}'
                ]
                subprocess.run(kill_command, check=True)
                print(f' ** stopping {server} with PID {pid} ** ')
            else:
                print(f' ** {server} process not found ** ')

        except subprocess.CalledProcessError as e:
            # if process not found, returncode is 1
            if e.returncode == 1:
                print(f' ** {server} process not found ** ')
            else:
                print(f'Error stopping {server}: {e}')
        


def stop_dns_server(args):
    '''
    Stops DNS server.
    '''
    # Draft ssh command to find and kill process
    ssh_command =  [
        'ssh',
        '-i', args.keyfile,
        f'{args.username}@{DNS_SERVER}',
        # find specific process and kill it
        f'lsof -ti:{args.port}' 
    ]
    try:
        # get process id
        process = subprocess.run(ssh_command, check=True, capture_output=True, text=True)
        pid = process.stdout.strip()
        
        # if pid found, kill it
        if pid:
            kill_command =  [
                'ssh',
                '-i', args.keyfile,
                f'{args.username}@{DNS_SERVER}',
                f'kill {pid}'
            ]
            subprocess.run(kill_command, check=True)
            print(f' ** stopping {DNS_SERVER} with PID {pid} ** ')
        else:
            print(f' ** {DNS_SERVER} process not found ** ')

    except subprocess.CalledProcessError as e:
        # if process not found, returncode is 1
        if e.returncode == 1:
            print(f' ** {DNS_SERVER} process not found ** ')
        else:
            print(f'Error stopping {DNS_SERVER}: {e}')
            
def main(args):    

    # stop all HTTP cache servers
    stop_http_servers(args, REPLICA_SERVERS.keys())

    # stop DNS server
    stop_dns_server(args)

if __name__ == '__main__':
    # parse arguments
    parser = argparse.ArgumentParser(description='Deploy CDN')
    parser.add_argument('-p', '--port', required=True, type=int, help='Port number to bind HTTP server to')
    parser.add_argument('-o', '--origin', required=True, type=str, help='Origin server to fetch content from')
    parser.add_argument('-n', '--name', required=True, type=str, help='CDN-specific domain name to translate')
    parser.add_argument('-u', '--username', required=True, type=str, help='Username for logging into cloud servers')
    parser.add_argument('-i', '--keyfile', required=True, type=str, help='Path to private key for logging into cloud servers')
    args = parser.parse_args()
    # run main function
    main(args)
