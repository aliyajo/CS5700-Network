#!/usr/bin/env python3
import argparse
import subprocess
import dnslib
import socket
import geocoder
import requests
from haversine import haversine

edge_servers = {
    'cdn-http3.khoury.northeastern.edu': '45.33.55.171', 
    'cdn-http4.khoury.northeastern.edu': '170.187.142.220', 
    'cdn-http7.khoury.northeastern.edu': '213.168.249.157', 
    'cdn-http11.khoury.northeastern.edu': '139.162.82.207', 
    'cdn-http14.khoury.northeastern.edu': '45.79.124.209', 
    'cdn-http15.khoury.northeastern.edu': '192.53.123.145', 
    'cdn-http16.khoury.northeastern.edu': '192.46.221.203',
}
class DNSServer:
    '''
    This class represents the DNS server.
    Should be able to dynamically return IP addresses based on the
    specified mapping code. 
        This mapping code is a system that maps IPs to nearby replica servers.
    '''
    def __init__(self, args):
        '''
        This is a constructor for the DNSServer class.
        '''
        # Port number to bind to, got from parsed argument
        self.port = args.port
        # Range of points have access to
        self.ports = range(20040, 20050)
        # CDN name, got from parsed argument
        self.name = args.name
        self.ip = None
        self.cache = {}

    def determining_corrdinates(self, addr):
        '''
        This is a helper function that helps establish a dictionary
        that contains information on the replica server's coordinates. 
        Also includes the distance from the given address.
        Params:
            @addr: The address of the client
        Returns:
            A dictionary containing the coordinates and distances
        '''
        # Figuring out coordinates for each replica server
        coordinates = {}
        # Iterate through edge_servers, and determine the coordinates for each
        for name, ip in edge_servers.items():
            g = geocoder.ip(ip)
            # Add these coordinates to the dictionary
            coordinates[ip] = {
                'lat': g.lat,
                'long': g.lng
            }

        # Now, calculate which of these is closer to the given addr coordinates
        addr_coord = geocoder.ip(addr)
        # Calculate the distance between the current address and the replica servers
        for ip, coord in coordinates.items():
            distance = haversine((coord['lat'], coord['long']), (addr_coord.lat, addr_coord.lng))
            # Add this calculated distance to the dictionary
            coordinates[ip]['distance'] = distance
        # Return the dictionary
        return coordinates

    def geographically_best_server(self, addr):
        '''
        This function is responsible for determining the 
        best replica server geographically.
        Params:
            @addr: The address of the client
        Returns:
            The closest server
        '''
        # Determine the coordinates
        coordinates = self.determining_corrdinates(addr)
        # Hardcoding random replica server to start
        closest_server = '45.33.55.171'
        # Iterate through the coordinates and determine the closest server
        for ip, coord in coordinates.items():
            if coord['distance'] < coordinates[closest_server]['distance']:
                closest_server = ip
        return closest_server

    def active_measurement_best_server(self):
        '''
        This function is taking an active approach when it comes to
        determining the best replica server.
        This involves:
            - Sending message to each replica server asking for performance metrics
            - Determine the best server based on the performance metrics
        '''
        # Dictionary for storing the performance metrics
        performance_metrics = {}
        # Iterate through each replica server
        for name, ip in edge_servers.items():
            p = subprocess.Popen(['ping', '-c', '1', ip], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = p.communicate()
            out = out.decode('utf-8')
            metrics = self.extract_ping_metrics(out)
            performance_metrics[ip] = metrics
        
        # Determine the best server based on the performance metrics
        best_server = self.comparing_servers(performance_metrics)
        return best_server

    def comparing_servers(self, performance_metrics):
        '''
        This is a helper function that compares the replica servers based on the given
        performance metrics.
        Params:
            @performance_metrics: The dictionary containing the performance metrics
        Returns:
            The best server
        '''
        # Establishing variables used for comparison
        best_server = None
        lowest_packet_loss = float('inf')
        lowest_avg_rtt = float('inf')
        # Iterate through the performance metrics
        for ip, metrics in performance_metrics.items():
            # Extract the metrics
            packet_loss = metrics['packet_loss']
            avg_rtt = metrics['avg_rtt']
            # First, lets look at if the packet loss is the lowest
            # If it is, then we have a new best server
            if packet_loss < lowest_packet_loss:
                lowest_packet_loss = packet_loss
                best_server = ip
            # If the next server has the same percentage,
            # will then compare the rtt metric
            elif packet_loss == lowest_packet_loss:
                # If the rtt is lower, then we have a new best server
                if avg_rtt < lowest_avg_rtt:
                    lowest_avg_rtt = avg_rtt
                    best_server = ip
        return best_server

    def extract_ping_metrics(self, out):
        '''
        This is a helper function that is responsible for extracting the metrics from the ping command.
        Want the rtt average time and the packet loss percentage from the ping statistics.
        Params:
            @out: The output from the ping command
        Returns:
            A dictionary containing the metrics
        '''
        metrics = {}
        # Split the output by newline
        for l in out.split('\n'):
            # If the line contains the word 
            if 'packets transmitted' in l:
                # Split the line by spaces
                l = l.split(' ')
                # Extract the percentage
                metrics['packet_loss'] = int(l[5].replace('%', ''))
            if 'rtt' in l:
                # Split the line by spaces
                l = l.split(' ')
                # Split again by '/'
                l = l[3].split('/')
                # Extract the rtt avg time, metric is in ms
                metrics['avg_rtt'] = float(l[1])
        return metrics

    def run(self):
        '''
        This is the main running function for the DNS server.
        '''
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.bind(('', self.port))
        
        try:
            while True:
                data, addr = s.recvfrom(1024)
                local_addr = addr[0]
                # Isolate the request
                request = dnslib.DNSRecord.parse(data)
                # Determine if the request if an A record
                # Also determine if the request is for the correct name
                if request.q.qname == self.name and request.q.qtype == dnslib.QTYPE.A:
                    # Determine the best server, geographically based
                    best_addr = self.geographically_best_server(local_addr)
                    # best_addr = self.active_measurement_best_server()
                    # Draft the response
                    response = request.reply()
                    response.add_answer(
                        dnslib.RR(
                            request.q.qname, 
                            dnslib.QTYPE.A,
                            ttl=300, 
                            rdata=dnslib.A(best_addr)))
                    # Send the response
                    s.sendto(response.pack(), addr)
        except Exception as e:
            print(e)
        # Close the socket
        finally:
            s.close()
        

if __name__ == "__main__":
    # Parse the correct arguments
    parser = argparse.ArgumentParser(description="dnsserver")
    # Parsing for the port number, required argument
    parser.add_argument('-p', dest="port", type=int, required=True, help='Port to bind to')
    # Parsing for the CDN-specific name of the server, required argument
    parser.add_argument('-n', dest="name", type=str, required=True, help='CDN-specific name of server')
    args = parser.parse_args()
    server = DNSServer(args)
    server.run()

