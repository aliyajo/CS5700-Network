#!/usr/bin/env python3
import argparse
import subprocess
import dnslib
import socket
from haversine import haversine
import time
import requests

REPLICA_SERVERS_INFO = {
    '45.33.55.171': 
 {
    'lat': 37.5625, 
    'long': -122.0004, 
    'country': 'US'}, 
 '170.187.142.220': 
 {
    'lat': 33.7485, 
    'long': -84.3871, 
    'country': 'US'}, 
 '213.168.249.157': 
 {
    'lat': 51.5074, 
    'long': -0.1196, 
    'country': 'GB'}, 
 '139.162.82.207': 
 {
    'lat': 35.6893, 
    'long': 139.6899, 
    'country': 'JP'}, 
 '45.79.124.209': 
 {
     'lat': 19.0748, 
     'long': 72.8856, 
     'country': 'IN'}, 
 '192.53.123.145': 
 {
    'lat': 43.6547, 
    'long': -79.3623, 
    'country': 'CA'}, 
 '192.46.221.203': 
 {
    'lat': -33.8715, 
    'long': 151.2006, 
    'country': 'AU'}
 }

class DNSServer:
    '''
    This class represents the DNS server.
    Should be able to dynamically return IP addresses based on the
    specified mapping code. 
        This mapping code is a system that maps IPs to nearby replica servers.
    '''
    def __init__(self, args):
        '''
        This is a constructor for the DNSServer class.
        '''
        # Port number to bind to, got from parsed argument
        self.port = args.port
        # CDN name, got from parsed argument
        self.name = args.name
        # DNS cache
        self.cache = {}
        # coordinate cache
        self.coord_cache = {}
        self.metrics = {}


    def best_server(self, addr):
        '''
        This function is responsible for determining the 
        best replica server.
        This entails determining the closest server to the client.
        Then check if the server is overloaded.
        Params:
            @addr: The address of the client
        Returns:
            The closest server
        '''
        # Determine the distances
        self.determining_distances(addr)
        # # Give the top three closest servers
        top_three = {ip: coord for ip, coord in list(self.metrics.items())[:3]}
        # Determine the best server based on the network performance, order in terms of best to worst
        ranked_performance = self.best_network_performance(top_three)
        # Iterate through these ranked servers, checking if they are overloaded
        for ip in ranked_performance:
            print(f"* Checking server {ip} *\n")
            if self.check_overloaded(ip):
                print(f"* Server {ip} is overloaded *\n")
                continue
            else:
                print(f"* Server {ip} is not overloaded *\n")
                return ip
        # If all servers are overloaded, return the closest server
        closest_server = list(self.metrics.keys())[0]
        print(f"* All servers are overloaded, returning to closest server {closest_server}* \n")
        # Get the first server in the dictionary
        closest_server = list(self.metrics.keys())[0]
        return closest_server
            
    def determining_distances(self, addr):
        '''
        This function helps establish a list
        of distances between the client and the replica servers.
        ** GEOLOCATION IMPLEMENTATION **
        Params:
            @addr: The address of the client
        Returns:
            A dictionary containing the distances
        '''
        # Check if the address is in the cache
        if addr in self.coord_cache:
            # Get the coordinates from the cache
            addr_coord = self.coord_cache[addr]
        else:
            # Sending request to geojs.io to get the coordinates
            response = requests.get(f'https://get.geojs.io/v1/ip/geo/{addr}.json')
            if response.status_code == 200:
                data = response.json()
                # Extract the coordinates
                addr_coord = {'lat': float(data.get('latitude')), 'long': float(data.get('longitude'))}
                # Update the cache
                self.coord_cache[addr] = addr_coord
            else:
                print(f"Error: {response.status_code}")
        # Determine the distances
        for ip, coord in REPLICA_SERVERS_INFO.items():
            # Check if the coordinates are in the cache
            if ip in self.coord_cache:
                coord = self.coord_cache[ip]
            else:
                coord = REPLICA_SERVERS_INFO[ip]
                self.coord_cache[ip] = coord
            # Calculate the distance
            distance = haversine((coord['lat'], coord['long']), (addr_coord['lat'], addr_coord['long']))
            # Add to the metrics dictionary
            self.metrics[ip]= {'distance': distance}
        self.metrics = dict(sorted(self.metrics.items(), key=lambda x: x[1]['distance']))

        # distances = {ip: haversine((coord['lat'], coord['long']), (addr_coord['lat'], addr_coord['long'])) for ip, coord in REPLICA_SERVERS_INFO.items()}
        # # Sort the distances by value, closest is first in the dictionary
        # self.metrics[
        # self.metrics = dict(sorted(distances.items(), key=lambda x: x[1]))
        return self.metrics

    def check_overloaded(self, ip):
        '''
        This function is responsible for checking if a server is overloaded.
        ** LOAD ON SERVERS IMPLEMENTATION **
        Params:
            @ip: The IP address of the server
        Returns:
            Boolean if the server is overloaded
        '''
        # URL to get the server info
        url = f'http://{ip}:{self.port}/get_server_info'
        metrics = {}
        try:
            # Send request to the HTTP server
            response = requests.get(url)
            metrics[ip] = response.json()
            # Check if the cpu_percent is greater than 90%
            # Or if any of the load averages are greater than 2.0
            if any([load >= 2.0 for load in metrics[ip]['load_average']]) or metrics[ip]['cpu_percent'] >= 90.0:
                return True
            else:
                return False
        except Exception as e:
            print(e)

    def best_network_performance(self, top_three):
        '''
        This function determines the best network performance.
        '''
        # Get the ping metrics
        self.ping_information(top_three)
        # Sort the ping metrics, best to worst
        ranked_performance = sorted(top_three.keys(), key=lambda x: (top_three[x]['packet_loss'] == 0, top_three[x]['avg_rtt']))
        return ranked_performance

    def ping_information(self, top_three):
        '''
        This function is responsible for getting the ping information.
        Params:
            @top_three: The top three closest servers

        '''
        # Iterate through the top three servers
        for ip in top_three:
            # Send a ping request to the server
            p = subprocess.Popen(['ping', '-q','-c', '1', ip], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = p.communicate()
            out = out.decode('utf-8')
            # Extract the metrics
            metrics = self.extract_ping_metrics(out)
            # Add to the metrics dictionary
            self.metrics[ip].update({'packet_loss': metrics['packet_loss'], 'avg_rtt': metrics['avg_rtt']})
        
        

    def extract_ping_metrics(self, out):
        '''
        This is a helper function that is responsible for extracting the metrics from the ping command.
        Want the rtt average time and the packet loss percentage from the ping statistics.
        Params:
            @out: The output from the ping command
        Returns:
            A dictionary containing the metrics
        '''
        metrics = {}
        # Split the output by newline
        for l in out.split('\n'):
            # If the line contains the word 
            if 'packets transmitted' in l:
                # Split the line by spaces
                l = l.split(' ')
                # Extract the percentage
                metrics['packet_loss'] = int(l[5].replace('%', ''))
            if 'rtt' in l:
                # Split the line by spaces
                l = l.split(' ')
                # Split again by '/'
                l = l[3].split('/')
                # Extract the rtt avg time, metric is in ms
                metrics['avg_rtt'] = float(l[1])
        return metrics

    def run(self):
        '''
        This is the main running function for the DNS server.
        '''
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.bind(('', self.port))
        print(f' ** dns server running on port {self.port} ** ')
        
        try:
            while True:
                data, addr = s.recvfrom(1024)
                local_addr = addr[0]
                # Isolate the request
                request = dnslib.DNSRecord.parse(data)
                # Determine if the request if an A record
                # Also determine if the request is for the correct name
                if request.q.qname == self.name and request.q.qtype == dnslib.QTYPE.A:
                    # Check if in DNS cache
                    if local_addr in self.cache:
                        # Check if the cache is still valid, using timing component
                        if time.time() - self.cache[local_addr]['time'] < 300:
                            # Draft the response
                            response = request.reply()
                            response.add_answer(
                                dnslib.RR(
                                    request.q.qname, 
                                    dnslib.QTYPE.A,
                                    ttl=300, 
                                    rdata=dnslib.A(self.cache[local_addr]['ip'])))
                            s.sendto(response.pack(), addr)
                            continue
                        # If the cache is invalid, remove it
                        else:
                            del self.cache[local_addr]
                    # Determine the best server, geographically based
                    best_addr = self.best_server(local_addr)
                    # Draft the response
                    response = request.reply()
                    response.add_answer(
                        dnslib.RR(
                            request.q.qname, 
                            dnslib.QTYPE.A,
                            ttl=300, 
                            rdata=dnslib.A(best_addr)))
                    # Send the response
                    s.sendto(response.pack(), addr)
                    print(f' ** Sent response to CLIENT ADDRESS: {addr}, & RESPONSE: {response} ** ')
                    # Update the cache
                    self.cache[local_addr] = {'ip': best_addr, 'time': time.time()}
        except Exception as e:
            print(e)
        # Close the socket
        finally:
            s.close()
        

if __name__ == "__main__":
    # Parse the correct arguments
    parser = argparse.ArgumentParser(description="dnsserver")
    # Parsing for the port number, required argument
    parser.add_argument('-p', dest="port", type=int, required=True, help='Port to bind to')
    # Parsing for the CDN-specific name of the server, required argument
    parser.add_argument('-n', dest="name", type=str, required=True, help='CDN-specific name of server')
    args = parser.parse_args()
    server = DNSServer(args)
    server.run()

