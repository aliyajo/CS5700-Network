#!/usr/bin/env python3

import argparse
import subprocess

# domain name & IP address of HTTP cache servers
REPLICA_SERVERS = {
    'cdn-http3.khoury.northeastern.edu': '45.33.55.171',
    'cdn-http4.khoury.northeastern.edu': '170.187.142.220', 
    'cdn-http7.khoury.northeastern.edu': '213.168.249.157', 
    'cdn-http11.khoury.northeastern.edu': '139.162.82.207', 
    'cdn-http14.khoury.northeastern.edu': '45.79.124.209', 
    'cdn-http15.khoury.northeastern.edu': '192.53.123.145', 
    'cdn-http16.khoury.northeastern.edu': '192.46.221.203',
}

DNS_SERVER = 'cdn-dns.khoury.northeastern.edu'

def deploy_http_server(port, origin, http_server, username, keyfile):
    '''
    Deploys HTTP cache servers.
    '''
    # Draft the command to deploy the HTTP server
    scp_command = [
        'scp', 
        '-i', keyfile,
        'httpserver',
        f"{username}@{http_server}:~/"
    ]
    print(f" ** Deploying HTTP server to {http_server} ** ")
    # Run the command
    subprocess.run(scp_command)

def deploy_dns_server(keyfile, username, server_name):
    '''
    Deploys DNS server.
    '''
    # Draft the command to deploy the DNS server
    scp_command = [
        'scp', 
        '-i', keyfile,
        'dnsserver',
        f"{username}@{server_name}:~/"
    ]
    print(f" ** Deploying DNS server to {server_name} ** ")
    # Run the command
    subprocess.run(scp_command)

def deploy_libraries(keyfile, username, server_name, library_name):
    '''
    Deploys libraries.
    '''
    # Draft the command to deploy the library
    ssh_command = [
        'ssh',
        '-i', keyfile,
        f"{username}@{server_name}",
        f"python3 -m pip install {library_name}"
    ]
    print(f" ** Deploying {library_name} to {server_name} ** ")
    try:
        # Run the command
        subprocess.run(ssh_command)
    except Exception as e:
        print(f"Error deploying {library_name} to {server_name}: {e}")


def main(args):
    '''
    This function deploys the CDN.
    Ensures all the files are deployed to the correct servers.
    Ensures libraries are installed on the correct servers.
    '''
    # deploy http servers
    for server in REPLICA_SERVERS:
        deploy_http_server(args.port, args.origin, REPLICA_SERVERS[server], args.username, args.keyfile)
    
    # deploy dns server
    deploy_dns_server(args.keyfile, args.username, DNS_SERVER)
    
    # deploy libraries
    for server in REPLICA_SERVERS:
        # psutil
        deploy_libraries(args.keyfile, args.username, REPLICA_SERVERS[server], 'psutil')
    # haversine
    deploy_libraries(args.keyfile, args.username, DNS_SERVER, 'haversine')
    # requests
    deploy_libraries(args.keyfile, args.username, DNS_SERVER, 'requests')
    # dnslib
    deploy_libraries(args.keyfile, args.username, DNS_SERVER, 'dnslib')

if __name__ == '__main__':
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Deploy CDN')
    parser.add_argument('-p', '--port', required=True, type=int, help='Port number to bind HTTP server to')
    parser.add_argument('-o', '--origin', required=True, type=str, help='Origin server to fetch content from')
    parser.add_argument('-n', '--name', required=True, type=str, help='CDN-specific domain name to translate')
    parser.add_argument('-u', '--username', required=True, type=str, help='Username for logging into cloud servers')
    parser.add_argument('-i', '--keyfile', required=True, type=str, help='Path to private key for logging into cloud servers')
    args = parser.parse_args()
    # Call main function
    main(args)