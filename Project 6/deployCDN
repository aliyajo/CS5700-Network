#! /usr/bin/env python

import argparse
import subprocess

'''
$ ./deployCDN [-p port] [-o origin] [-n name] [-u username] [-i keyfile]

EXAMPLE: `./deployCDN -p 20380 -o cs5700cdnorigin.ccs.neu.edu -n cdn-dns.khoury.northeastern.edu -u quach.l -i keys/ssh-ed25519-quach.l.priv`

port, origin, and name are the same as above. username is the account name you
use for logging in and keyfile is the path to the private key you use for
logging into nodes. Your scripts should use the last two arguments as follows: 

$ ssh -i keyfile username@<some cloud server> ...
'''

# domain name & IP address of HTTP cache servers
REPLICA_SERVERS = {
    'cdn-http3.khoury.northeastern.edu': '45.33.55.171',
    'cdn-http4.khoury.northeastern.edu': '170.187.142.220', 
    'cdn-http7.khoury.northeastern.edu': '213.168.249.157', 
    'cdn-http11.khoury.northeastern.edu': '139.162.82.207', 
    'cdn-http14.khoury.northeastern.edu': '45.79.124.209', 
    'cdn-http15.khoury.northeastern.edu': '192.53.123.145', 
    'cdn-http16.khoury.northeastern.edu': '192.46.221.203',
}

DNS_SERVER = 'cdn-dns.khoury.northeastern.edu'

def parse_args():
    '''
    Parses command line arguments.
    '''
    parser = argparse.ArgumentParser(description='Deploy CDN')
    parser.add_argument('-p', '--port', required=True, type=int, help='Port number to bind HTTP server to')
    parser.add_argument('-o', '--origin', required=True, type=str, help='Origin server to fetch content from')
    parser.add_argument('-n', '--name', required=True, type=str, help='CDN-specific domain name to translate')
    parser.add_argument('-u', '--username', required=True, type=str, help='Username for logging into cloud servers')
    parser.add_argument('-i', '--keyfile', required=True, type=str, help='Path to private key for logging into cloud servers')
    return parser.parse_args()

def deploy_http_server(port, origin, http_server, username, keyfile):
    '''
    Deploys HTTP cache servers.
    '''
    # example: scp -i keys/ssh-ed25519-quach.l.priv httpserver quach.l@cdn-http3.khoury.northeastern.edu:~/ 

    scp_command = [
        'scp', 
        '-i', keyfile,
        'httpserver',
        f"{username}@{http_server}:~/"
    ]
    print(f" ** deploying HTTP server to {http_server} ** ")
    subprocess.run(scp_command)


def deploy_dns_server(keyfile, username, server_name):
    '''
    Deploys DNS server.
    '''
    # example: scp -i keys/ssh-ed25519-quach.l.priv dnsserver quach.l@cdn-dns.khoury.northeastern.edu:~/`
    scp_command = [
        'scp', 
        '-i', keyfile,
        'dnsserver',
        f"{username}@{server_name}:~/"
    ]
    print(f" ** deploying DNS server to {server_name} ** ")
    subprocess.run(scp_command)

def deploy_geoip_db(keyfile, username, server_name):
    '''
    Deploys GeoIP database.
    '''
    # example: scp -i keys/ssh-ed25519-quach.l.priv GeoIp2/GeoLite2-City.mmdb quach.l@cdn-dns.khoury.northeastern.edu:~/
    scp_command = [
        'scp', 
        '-i', keyfile,
        'GeoIp2/GeoLite2-City.mmdb',
        f"{username}@{server_name}:~/"
    ]
    print(f" ** deploying GeoIP database to {server_name} ** ")
    subprocess.run(scp_command)

def deploy_libraries(keyfile, username, server_name, library_name):
    '''
    Deploys libraries.
    '''
    # example: pip install psutil
    ssh_command = [
        'ssh',
        '-i', keyfile,
        f"{username}@{server_name}",
        f"python3 -m pip install {library_name}"
    ]
    print(f" ** deploying {library_name} to {server_name} ** ")
    try:
        subprocess.run(ssh_command)
    except Exception as e:
        print(f"Error deploying {library_name} to {server_name}: {e}")


def main():
    args = parse_args()
    print(args)

    # deploy http servers
    for server in REPLICA_SERVERS:
        deploy_http_server(args.port, args.origin, REPLICA_SERVERS[server], args.username, args.keyfile)
    
    # deploy dns server
    deploy_dns_server(args.keyfile, args.username, DNS_SERVER)
    
    # deploy GeoIP database
    deploy_geoip_db(args.keyfile, args.username, DNS_SERVER)
    
    # deploy libraries
    for server in REPLICA_SERVERS:
        # psutil
        deploy_libraries(args.keyfile, args.username, REPLICA_SERVERS[server], 'psutil')
    # haversine
    deploy_libraries(args.keyfile, args.username, DNS_SERVER, 'haversine')
    # geoip2
    deploy_libraries(args.keyfile, args.username, DNS_SERVER, 'geoip2')
    # requests
    deploy_libraries(args.keyfile, args.username, DNS_SERVER, 'requests')
    # dnslib
    deploy_libraries(args.keyfile, args.username, DNS_SERVER, 'dnslib')
if __name__ == '__main__':
    main()