#!/usr/bin/env python3
'''
Made by: Aliya Jordan
Date: 1/17/2024

Project 1: This project is to implement a client program that plays a variant
of the recently popularized game Wordle. 
It makes guesses for the secret word, and will wait for the given server
to give information about how close your guess is. 
Once the client guesses the correct word, the server will return a secret flag that is unique to each student.

This client program support TLS encrypted sockets
'''
# Importing appropriate libraries
import argparse
import json
import socket 
import random
import ssl

def parse_args():
    '''
    This function parses the command line arguments. 
    Returns the parsed arguments
    '''
    # create a parser object
    parser = argparse.ArgumentParser(description='Command Parser for Client Program')
    # add arguments to the parser object
    parser.add_argument('-p', '--PortNumber', action='store', type=int, help="Port Number", required=False)
    parser.add_argument('-s', "--TLSencryptedsocket", action='store_true', help="TLS encrypted socket connection", required=False)
    parser.add_argument('HostName', type=str, action='store', help="Host Name")
    parser.add_argument('NortheasternUsername', type=str, action='store', help="Northeastern Username")
    
    args = parser.parse_args()
    # Checking to see if the port number was supplied. 
    if args.PortNumber is None and not args.TLSencryptedsocket:
        # if port number not supplied, make it a default. 
        args.PortNumber = 27993
    # If TLS encryption wanted, but port not given, give port the default
    elif args.TLSencryptedsocket and args.PortNumber is None:
        args.PortNumber = 27994

    return args


def connect_to_server(HostName, PortNumber, TLSencryptedsocket, NortheasternUsername):
    '''
    This function is able to connect to the server with parsed argument from the command line.
    Once connected, will send hello message server to initiate protocol for the game.

    Params:
        @HostName is the host name of the server
        @PortNumber is the port number
        @NortheasternUsername is the Northeastern Username
    '''
    try:
        # Make a socket variable
        c_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # Connect with TLS encryption if TLSencryptedsocket is true
        if TLSencryptedsocket:
            context = ssl.create_default_context()
            c_socket = context.wrap_socket(c_socket, server_hostname=HostName)

        # Connect to server
        c_socket.connect((HostName, PortNumber))

        # Send hello message to server
        hello_message = json.dumps({
            "type": "hello",
            "northeastern_username": NortheasternUsername
        }) + "\n"
        c_socket.send(hello_message.encode())

        # Return c_socket object
        return c_socket

    except Exception as e:
        print(f"Error: {e}")
        exit(1)


def read_response(c_socket):
    '''
    This function reads the response from the server.
    Params:
        @c_socket is the socket object
    Returns the response from the server 
    '''
    try:
        # Read response from server
        response = c_socket.recv(5000).decode()
        # Parse response from server
        response = json.loads(response)
        # If there is no response from the server.
        if response == None:
            print("There is no response from the server.")
            exit(1)
        # If there is a response, return it.
        return response 
    #Error handling
    except Exception as e:
        print(f"Error: {e}")
        exit(1)


def read_wordlist():
    '''
    This function reads the wordlist.txt file and returns a list of words.
    Returns a list of words from the text file
    '''
    # Select the wordlist.txt file that is in the directory of Project 1.
    path = r"Project 1/wordlist.txt"
    # Read the file and send the guess to the server
    try:
        with open(path, "r") as file:
            contents = file.read()
            guesses = contents.split()
            return guesses
    # If file not found, print error File Not Found. 
    except FileNotFoundError:
        print(f"File not found")
        exit()
    # For any other error, print the error. 
    except Exception as e:
        print(f"Error: {e}")
        exit()

def send_a_guess(c_socket, id, guess):
    '''
    This functions sends a guess to the server from the socket.
    Params:
        @c_socket is the socket object
        @id is the id of the client for the current game
        @guess is the word that is being guessed
    '''
    # Send guess message to server
    guess_message = json.dumps({
        "type": "guess",
        "id": id,
        "word": guess
    }) + "\n"
    c_socket.send(guess_message.encode())

def filter_words(guesses, guessed_word, marks):
    '''
    This function fiters the list of filtered_words
    Params:
        @guesses is the list of official words used by Wordle. 
        @guessed_word is the word that was guessed for the current iteration.
        @marks is the list of marks that correspond to the guessed word.
    Returns: a list of filtered words from the guesses list. 
    '''
    filtered_list = []

    # iterate through the words in the whole entire guesses list
    for word in guesses:
        # set variable checker to true
        is_valid = True
        # iterate through the letters in the guessed word and the corresponding marks array
        for letter, mark in zip(guessed_word, marks):
            # if the mark is 0
            if mark == 0:
                # if the letter is in any of the words of the guessed words, then not valid letter and
                # if the index of the letter is not the same as the index of the letter in the guessed word, then not valid letter
                # checking even if the letter is in the word but not in the correct position
                if letter in word and word.index(letter) != guessed_word.index(letter):
                    is_valid = False
                    break
            # if the mark is 1 
            elif mark == 1:
                # if the letter is not in the word, then not valid word.
                if letter not in word:
                    is_valid = False
                    break
            # if the mark is 2
            elif mark == 2:
                # if the letter is not in the exact same index of the guessed word, then not valid word
                if letter != word[guessed_word.index(letter)]:
                    is_valid = False
                    break
        # if the word is valid, add to the filitered_list
        if is_valid:
            filtered_list.append(word)
    # return the filtered list
    return filtered_list

def main():
    '''
    This is a main function that runs the entire game. 
    '''
    # Parse the command line arguments
    args = parse_args()
    print(args)
    # Connect to server, tie this to variable c_socket
    c_socket = connect_to_server(args.HostName, args.PortNumber, args.TLSencryptedsocket, args.NortheasternUsername)
    id = read_response(c_socket)["id"]
    # Perform guess
    guesses = read_wordlist()
    guess = random.choice(guesses)
    send_a_guess(c_socket, id, guess)
    # Perform loop until game is over
    while True:
        # try to run the game
        try:
            # Receive response
            response = read_response(c_socket)
            print(response)
            # if the response type from server is "bye", then print out the secret flag
            if response["type"] == "bye":
                print(response["flag"])
                break
            # if the response type from server is "retry", then will keep guessing
            elif response["type"] == "retry":
                # guessed_ word is the last word that is guessed
                guessed_word = response["guesses"][-1]["word"]
                # marks is the marks that correspond with the last guessed word
                marks = response["guesses"][-1]["marks"]
                # Filter words based on response
                filtered_list = filter_words(guesses, guessed_word, marks)
                # Raise error if no words left in filtered list -- word not in the guesses list
                if len(filtered_list) == 0:
                    raise Exception("No words left")
                    exit(1)
                else:
                    # Send guess
                    guess = random.choice(filtered_list)
                    send_a_guess(c_socket, id, guess)
        # Error handling
        except Exception as e:
            print(f"Error: {e}")
            exit(1)


if __name__ == "__main__":
    main()
