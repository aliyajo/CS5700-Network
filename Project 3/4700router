#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Router:

    relations = {}
    sockets = {}
    ports = {}
    forwarding_table = {}
    recent_announcement = None

    def __init__(self, asn, connections):
        '''
        This is the constructor for our class Router Object. 
        It is able to initialize this router object with the provided AS Number, 
        as well as the list of connections to neighboring routers. 
        It then sets up communication channels with each neighbor through UDP sockets. 
        The port, numbers, relations, and sockets of each neighbor are stored as attributes of the router object.
        Sends handshake message to each neighbor neighbor router to establish communication.
        Params:
            @asn: Autonomous System Number
            @Connections: List of strings representing connections to other routers
        '''
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        self.connections = connections
        
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        '''
        Modifies the given destination IP address into a new IP address.
        This new IP address comes in dotted quad notation. This is the format expected from the IP addresses.
        Params:
            @dst: Destination IP address
        Returns:
            Modified Quad Ip address
        '''
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        '''
        This function is responsible for sending a message to a specified to network using UDP socket. 
        Params:
            @network: Represents the destination network that want to send message to
            @message: Is the message to be sent to the destination network
        '''
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def run(self):
        '''
        This function is what runs our router object.
        '''
        while True:
            # Selects sockets that are ready for reading
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            # Iterates over the sockets that we know are ready for reading
            for conn in socks:
                # Recieves message from the current socket.
                # k = recieved data, addr = address of the sender
                k, addr = conn.recvfrom(65535)
                # Stores the source interface which the message was recieved
                srcif = None
                # Iterate through the sockets that are stored
                for sock in self.sockets:
                    # If the current socket is the same socket as the one which message was recieved
                    if self.sockets[sock] == conn:
                        # If it is then the srcif = current socket 
                        srcif = sock
                        break
                # Decodes the recieved message
                msg = k.decode('utf-8')
                # Print a message recieved message from the source interface
                print("Received message '%s' from %s" % (msg, srcif))
                
                try:
                    # Load the recieved message into a dictionary
                    msg = json.loads(msg)
                except:
                    print('Error parsing message')
                    continue
                
                # Handle the message according to the message type
                self.handle_msg(msg, srcif)
        return
    
    
    def handle_msg(self, msg, srcif):
        '''
        This function takes messages recieved from the neighboring routers &
        handles them according to the message type.
        Params:
            @msg: The message recieved from the neighboring routers
        '''
        msg_type = msg.get('type')

        if msg_type == 'update':
            self.handle_update(msg, srcif)
            # self.send
        elif msg_type == 'withdraw':
            # self.handle_withdraw(msg)
            self.handle_withdraw(msg, srcif)
        elif msg_type == 'data':
            pass
        elif msg_type == 'dump':
            self.handle_dump(msg, srcif)
        else:
            raise ValueError(f'Message type error: {msg_type}')


    def handle_update(self, msg, srcif):
        '''
        This function handles the update message recieved from the neighboring
        routers & updates the forwarding table of the router. This updated route
        announcement is forwarded to all neighbors except the source.
        Params:
            @msg: The update message recieved from the neighboring routers
            @srcif: The source interface from which the message was recieved
        '''
        print('Received update msg from %s .. **UPDATING TABLE**' % srcif)
        
        # extract network attributes
        msg_data = msg['msg']
        network = msg_data['network']
        netmask = msg_data['netmask']
        localpref = msg_data['localpref']
        ASPath = msg_data['ASPath']
        origin = msg_data['origin']
        selfOrigin = msg_data['selfOrigin']
        
        # append router's ASN to front of ASPath
        if self.asn not in ASPath:
            ASPath.insert(0, self.asn)
        
        # update forwarding table
        self.forwarding_table[network] = {
            'netmask': netmask,
            'localpref': localpref,
            'ASPath': ASPath,
            'origin': origin,
            'selfOrigin': selfOrigin,
            # Neighbor IP Address
            'peer': msg['src']
        }
        print(f'**FORWARDING TABLE**: {self.forwarding_table}')
        
        # forward update to all neighbors except source
        for connection in self.connections:
            port, neighbor, relation = connection.split("-")
            if neighbor != msg['src']:
                
                # update route announcment
                update_msg = {
                    'msg': {
                        'netmask': msg_data['netmask'],
                        'ASPath': msg_data['ASPath'],
                        'network': network,
                    },
                    'src': self.our_addr(neighbor),
                    'dst': neighbor,
                    'type': 'update'
                }
                self.send(neighbor, json.dumps(update_msg))
        return


    # def handle_withdraw(self, msg):
    #     '''
    #     This function is for handling when there are route withdrawal messages.
    #     This is the case when a neighboring router may need to withdraw an announcement.
    #     This function in response to recieving a withdrawal message is to:
    #         1. Save copy of the revocation/cancellation of a statement
    #         2. Remove the dead entry from the forwarding table
    #         3. The copy that was saved, send this to other neighboring routes
    #     Params:
    #         @msg:
    #     '''
    #     # Save a copy of this revocation
    #     self.recent_announcement = msg
    #     apple = {
    #         "BEFORE TABLE": self.forwarding_table}
    #     print(json.dumps( apple))
    #     # Splicing the withdrawal message 
    #     network_removal = []
    #     netmask_removal = []
    #     # Iterate through the withdrawal message data
    #     for i in msg['msg']:
    #         # Append the network information into curated list
    #         network_removal.append(i['network'])
    #         # Append the netmask information into curated list
    #         netmask_removal.append(i['netmask'])

    #     # Iterate through the forwarding table
    #     for i in self.forwarding_table:
    #         # If the network prefix is in the network removal curated list
    #         if i in network_removal:
    #         # Then, check if this matching network prefix has the same source as the withdrawal source
    #             if self.forwarding_table[i]['peer'] == msg['src']:
    #                 # If it does, then remove the network prefix from the forwarding table
    #                 del self.forwarding_table[i]
    #                 break
            
    #     # Here for debugging purposes 
    #     testing = {
    #         "**Hello**" : network_removal, 
    #         "TABLE" : self.forwarding_table
    #     }
    #     print(json.dumps(testing))
    #     return

    def handle_withdraw(self, msg, srcif):
        print(f"Received withdraw msg from {srcif} .. **REMOVING ROUTE**")
        # iterate through received withdrawal data to pull network & netmask
        for withdraw_data in msg['msg']:
            network = withdraw_data['network']
            netmask = withdraw_data['netmask']
            
            # construct complex key to make network/netmask combo unique
            # since the withdraw msg we receive gives us the network and netmask
            # so we remove only the entry that matches the network and netmask combo
            table_key = f"{network}/{netmask}"
            
            if table_key in self.forwarding_table:
                del self.forwarding_table[table_key]
                print(f"**REMOVED NETWORK/NETMASK**: {table_key}")
                
        # forward withdrawal announcement to all neighbors except to source of
        # the withdrawal announcement
        for connection in self.connections:
            port, neighbor, relation = connection.split("-")
            if neighbor != msg['src']:
                
                # create the withdraw route announcment for our router to send
                # out to all neighbors
                withdraw_msg = {
                    'msg': [{
                        'netmask': withdraw_data['netmask'],
                        'network': withdraw_data['network']
                    }],
                    'src': self.our_addr(neighbor),
                    'dst': neighbor,
                    'type': 'withdraw'
                }
                # send the withdraw announcement
                self.send(neighbor, json.dumps(withdraw_msg))
        return
                    

    def handle_data():
        pass
    
    
    def handle_dump(self, msg, srcif):
        src = msg['src']
        dst = msg['dst']
        quads = list(int(qdn) for qdn in dst.split('.'))
        
        table_entries = []
        
        # convert frwd table to list of dicts
        for network, attributes in self.forwarding_table.items():
            
            # TODO: --------- fix logic here: cheesed ASPath by removing self.asn ---------
            if attributes['ASPath'][0] == self.asn:
                # delete self-asn
                attributes['ASPath'].pop(0)   
            
            table_entry = {
                'origin': attributes['origin'],
                'localpref': attributes['localpref'],
                'network': network,
                'ASPath': attributes['ASPath'],
                'netmask': attributes['netmask'],
                'peer': attributes['peer'],
                'selfOrigin': attributes['selfOrigin']
            }
            table_entries.append(table_entry)
        
        # TODO: --------- check logic here: confirm src & dst ---------
        # send table to source
        table_msg = {
            'src': self.our_addr(src),
            'dst': src,
            'type': 'table',
            'msg': table_entries
        }
        self.send(src, json.dumps(table_msg))
        print(f"**TABLE MESSAGE**: {table_msg}")
        return


    def handle_no_route():
        pass

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
